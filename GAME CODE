let gameState = "start";
let pets = [
    {name: "Dog", emoji: "üê∂", price: 0, owned: true, alive: true},
    {name: "Cat", emoji: "üê±", price: 50, owned: false, alive: true},
    {name: "Rabbit", emoji: "üê∞", price: 60, owned: false, alive: true},
    {name: "Chicken", emoji: "üêî", price: 75, owned: false, alive: true},
    {name: "Turtle", emoji: "üê¢", price: 80, owned: false, alive: true},
    {name: "Fox", emoji: "ü¶ä", price: 90, owned: false, alive: true},
    {name: "Snake", emoji: "üêç", price: 100, owned: false, alive: true},
    {name: "Panda", emoji: "üêº", price: 150, owned: false, alive: true},
    {name: "Tiger", emoji: "üêØ", price: 200, owned: false, alive: true},
    {name: "Dragon", emoji: "üêâ", price: 500, owned: false, alive: true}
];
let currentPet = pets[0];
let hunger = 100, happiness = 100, energy = 100, coins = 0, food = 0;
let obstacles = [], jump = false, velocity = 0, gravity = 0.6, jumpForce = -10, petY = 300, successfulJumps = 0;
let homeColor = "#A77B5D";
let buttons = [];
let sleepTimer = 0, sleeping = false;
let changingPet = false;
let hoveredText = "";
let lastEventTime = 0;
let lastPassiveEarningTime = 0;
let eventMessage = "";
let eventMessageTimer = 0;

function setup() {
    createCanvas(650, 400);
    textAlign(CENTER, CENTER);
    textFont('Comic Sans MS');
    setInterval(decreaseStats, 10000);
    setInterval(triggerRandomEvent, 30000);
    setInterval(passiveCoinEarning, 15000);
}

function draw() {
    background(220);
    buttons = [];
    hoveredText = "";
    if (gameState === "start") drawStartMenu();
    else if (gameState === "home") drawHome();
    else if (gameState === "parkour") drawParkour();
    else if (gameState === "inventory") drawInventory();
    else if (gameState === "shop") drawShop();
    else if (gameState === "sleep") drawSleep();
    else if (gameState === "gameOver") drawGameOver();
    else if (gameState === "changePet") drawChangePetMenu();
    if (hoveredText !== "") {
        fill(0);
        rect(mouseX, mouseY - 20, textWidth(hoveredText) + 10, 20);
        fill(255);
        textSize(12);
        text(hoveredText, mouseX + (textWidth(hoveredText) / 2), mouseY - 10);
    }
}

function drawStartMenu() {
    background(homeColor);
    fill(255);
    textSize(32);
    text("Pet Paradise", width / 2, height / 4);
    buttons.push(drawButton("Play", width / 2, height / 2, () => gameState = "home"));
}

function drawHome() {
    background(homeColor);
    fill(255);
    textSize(20);
    text(`Coins: ${coins} üí∞`, width - 80, 20);
    textSize(70);
    text(currentPet.emoji, width / 2, height / 2);     
        
    if (eventMessage !== "") {
        fill(255);
        rect(width / 2 - 151, height / 2 - 90, 300, 40, 10);
        fill(0);
        textSize(14);
        text(eventMessage, width / 2, height / 2 - 70);
        if (millis() > eventMessageTimer + 5000) {
            eventMessage = "";
        }
    }
  
    let ownedPets = pets.filter(pet => pet.owned).length;
    if (ownedPets >= 3) {
        text("üèÖ", width / 2 + 50, height / 2);
        if (dist(mouseX, mouseY, width / 2 + 50, height / 2) < 20) {
            hoveredText = "Achievement: Own 3 pets!";
        }
    }
    if (ownedPets === pets.length) {
        text("üèÜ", width / 2 + 100, height / 2);
        if (dist(mouseX, mouseY, width / 2 + 100, height / 2) < 20) {
            hoveredText = "Achievement: Collected all pets!";
        }
    }
    
      if (eventMessage !== "") {
        fill(255, 204, 0);
        textSize(16);
        text(eventMessage, width / 2, height - 50);
    }
    
    buttons.push(drawButton("Parkour", 100, 350, () => startParkour()));
    buttons.push(drawButton("Inventory", 250, 350, () => gameState = "inventory"));
    buttons.push(drawButton("Sleep", 400, 350, () => sleepPet()));
    buttons.push(drawButton("Shop", 550, 350, () => gameState = "shop"));
    buttons.push(drawButton("Change Pet", width / 2, height / 2 + 80, () => gameState = "changePet"));
    drawBars();
}

function triggerRandomEvent() {
    let events = [
        "Your pet found a hidden coin! üí∞ +5", 
        "A visitor gifted your pet some coins! üí∞ +10",
        "Your pet discovered a small treasure! üí∞ +15"
    ];
    let randomEvent = random(events);
    coins += (randomEvent.includes("+5")) ? 5 : (randomEvent.includes("+10")) ? 10 : 15;
    eventMessage = randomEvent;
    eventMessageTimer = millis();
}

function passiveCoinEarning() {
    let ownedPets = pets.filter(pet => pet.owned).length;
    if (ownedPets > 1) {
        coins += ownedPets;
    }
}

function sellFood() {
    if (food > 0) {
        food--;
        coins += 3;
    }
}

function drawChangePetMenu() {
    background("lightblue");
    fill(0);
    textSize(24);
    text("Select a Pet", width / 2, 40);
    let x = 50;
    for (let pet of pets) {
        if (pet.owned) {
            textSize(50);
            text(pet.emoji, x, height / 2);
            buttons.push(drawButton(pet.emoji, x, height / 2 + 50, () => { currentPet = pet; gameState = "home"; }));
            x += 60;
        }
    }
    buttons.push(drawButton("Back", width / 2, height - 50, () => gameState = "home"));
}

function startParkour() {
    gameState = "parkour";
    obstacles = [];
    petY = 300;
    successfulJumps = 0;
    let lastX = 400;
    for (let i = 1; i <= 5; i++) {
        let newX = lastX + random(250, 350);
        obstacles.push({x: newX, y: 320, w: 20, h: 30});
        lastX = newX;    }
}

function drawParkour() {
    background("lightgreen");
    fill(255);
    textSize(24);
    text("Jump over obstacles!", width / 2, 50);
    textSize(50);
    text(currentPet.emoji, 100, petY);
    
    velocity += gravity;
    petY += velocity;
    if (petY > 300) {
        petY = 300;
        velocity = 0;
        jump = false;
    }

    for (let obs of obstacles) {
        fill("brown");
        rect(obs.x, obs.y, obs.w, obs.h);
        obs.x -= 5;
        if (obs.x < -20) {
            obs.x = width + random(250, 350);
            coins++;
            successfulJumps++;
            if (successfulJumps % 10 === 0) food++;
        }
        if (collideRect(100, petY + 10, 40, 40, obs.x, obs.y, obs.w, obs.h)) {
            gameState = "home";
            happiness = min(100, happiness + 10);
            food++;
            energy -= 10;
            return;
        }
    }
    buttons.push(drawButton("Back", 550, 20, () => gameState = "home"));
}

function sleepPet() {
    gameState = "sleep";
    sleepTimer = millis();
    sleeping = true;
}

function drawSleep() {
    background(50);
    fill(255);
    textSize(50);
    text("Zzz...", width / 2, height / 2);
    if (millis() - sleepTimer > 5000) {
        energy = 100;
        gameState = "home";
        sleeping = false;
    }
}

function keyPressed() {
    if (key === " " && petY === 300) velocity = jumpForce;
}

function collideRect(x1, y1, w1, h1, x2, y2, w2, h2) {
    return x1 < x2 + w2 && x1 + w1 > x2 && y1 < y2 + h2 && y1 + h1 > y2;
}

function drawInventory() {
    background(200);
    textSize(20);
    text("Inventory", width / 2, 50);
    text(`Food: ${food} üçñ`, width / 2, 100);
    buttons.push(drawButton("Feed", width / 2, 200, () => feedPet()));
    buttons.push(drawButton("Back", width / 2, 300, () => gameState = "home"));
    buttons.push(drawButton("Sell Food", width / 2, 250, sellFood));
}

function drawShop() {
    background("#FFD700");
    textSize(24);
    text(`Coins: ${coins} üí∞`, width / 2, 50);
    for (let i = 0; i < pets.length; i++) {
        let pet = pets[i];
        let status = pet.owned ? "Owned" : pet.alive ? `$${pet.price}` : "Dead";
        buttons.push(drawButton(`${pet.emoji} ${pet.name} - ${status}`, width / 2, 100 + i * 30, () => buyPet(pet)));
    }
    buttons.push(drawButton("Back", 550, 350, () => gameState = "home"));
}

function drawGameOver() {
    background(0);
    fill(255, 0, 0);
    textSize(32);
    text("Game Over", width / 2, height / 2 - 20);
    buttons.push(drawButton("Restart", width / 2, height / 2 + 20, () => restartGame()));
}

function drawBars() {
    drawBar("Hunger", hunger, 20, 20, "red");
    drawBar("Happiness", happiness, 20, 50, "lime");
    drawBar("Energy", energy, 20, 80, "gold");
}

function drawBar(label, value, x, y, color) {
    fill(255);
    textSize(14);
    text(label, x + 50, y - 5);
    fill(color);
    rect(x, y, value, 10);
}

function drawButton(label, x, y, action) {
    fill(200);
    rect(x - 50, y - 15, 100, 30, 10);
    fill(0);
    textSize(16);
    text(label, x, y);
    return {x: x - 50, y: y - 15, w: 100, h: 30, action};
}

function mousePressed() {
    for (let btn of buttons) {
        if (mouseX > btn.x && mouseX < btn.x + btn.w && mouseY > btn.y && mouseY < btn.y + btn.h) {
            btn.action();
        }
    }
}


function decreaseStats() {
    hunger = max(0, hunger - 5);
    happiness = max(0, happiness - 5);
    energy = max(0, energy - 2);
    checkDeath();
}

function checkDeath() {
    if (hunger === 0 || happiness === 0 || energy === 0) {
        currentPet.alive = false;
        let alivePet = pets.find(p => p.owned && p.alive);
        if (alivePet) currentPet = alivePet;
        else gameState = "gameOver";
    }
}

function buyPet(pet) {
    if (!pet.owned && coins >= pet.price) {
        coins -= pet.price;
        pet.owned = true;
    } else if (pet.owned && pet.alive) {
        currentPet = pet;
    }
}

function sleepPet() {
    energy = min(100, energy + 40);
}

function feedPet() {
    if (food > 0) {
        food--;
        hunger = min(100, hunger + 30);
    }
}

function buyPet(pet) {
    if (!pet.owned && pet.price <= coins) {
        coins -= pet.price;
        pet.owned = true;
    }
}

function restartGame() {
    hunger = happiness = energy = 100;
    pets.forEach(p => p.alive = true);
    gameState = "start";
}

function drawButton(label, x, y, action) {
    fill(200);
    rect(x - 75, y - 15, 150, 30, 10);
    fill(0);
    textSize(16);
    text(label, x, y);
    return {x: x - 75, y: y - 15, w: 150, h: 30, action};
}

